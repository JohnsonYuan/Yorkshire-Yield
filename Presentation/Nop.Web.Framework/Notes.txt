﻿References:
Nop.Core
Nop.Services


﻿有意思的属性:
System.ComponentModel.DisplayNameAttribute
IModelAttribute
e.g.: override DisplayName属性, 自定义显示值
NopResourceDisplayName : System.ComponentModel.DisplayNameAttribute, IModelAttribute

ActionFilterAttribute
AttributedValidatorFactory (NopValidatorFactory.cs)
ActionResult => override ExecuteResult() Enables processing of the result of an action method by a custom type that inherits from the ActionResult class.

public class LocalizedRoute : Route ，  override GetRouteData

MVC custom constraint: inherit IRouteConstraint, overrite Match
如果不满足constraint， 则返回404 页面
routes.MapRoute(//...
                defaults: new { controller = "Home", action = "Index", id = UrlParameter.Optional },
                constraints: new { id = "\\d+", controller = new DemoRouteConstraint() }
            );

public class DemoRouteConstraint : IRouteConstraint
{
    public bool Match(HttpContextBase httpContext, Route route, string parameterName, RouteValueDictionary values, RouteDirection routeDirection)
    {
		//parameterName 是MapRoute参数constraints当前属性名
		//values 是MapRoute参数defaults
		if (values.ContainsKey(parameterName))
		{
			// 获取controller的值
			var controller = values[parameterName];
			// 判断controller是否满足
		}
    }
}


XSRF/CSRF Prevention in ASP.NET MVC and Web Pages
https://www.asp.net/mvc/overview/security/xsrfcsrf-prevention-in-aspnet-mvc-and-web-pages


DisplayName：
NopResourceDisplayName : System.ComponentModel.DisplayNameAttribute
重写DisplayNamesh属性


FluentValidation(Install-Package FluentValidation)：
https://github.com/JeremySkinner/FluentValidation

1. Custom validator(Nop.Web.Framework\Validators\):
http://fluentvalidation.codeplex.com/wikipage?title=Custom
two ways of custom validator:
create a custom property validator(CreditCardPropertyValidator.cs, ValidatorExtensions.cs)
make use of the Custom method on AbstractValidator(BaseNopValidator.cs)

2. AttributedValidatorFactory(https://fluentvalidation.codeplex.com/wikipage?title=mvc)
App_Start():
FluentValidationModelValidatorProvider.Configure();
or custom factory:
FluentValidationModelValidatorProvider.Configure(provider => {
  provider.ValidatorFactory = new MyCustomValidatorFactory();
});

[Validator(typeof(PersonValidator))]
public class Person { public int Id { get; set; } }

public class PersonValidator : AbstractValidator<Person> {
	public PersonValidator() { RuleFor(x => x.Id).NotNull(); }
}
