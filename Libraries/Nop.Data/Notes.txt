需要引用System.Transactions， Nop.Core
需要的package:
EntityFramework
Microsoft.SqlServer.Compact     (SqlCeConnectionStringBuilder需要)

?
//EfStartUpTask 中调用： 问题=> 找到在哪里注册的DataSettings
var settings = EngineContext.Current.Resolve<DataSettings>();

Entity Framework Config File Settings:
https://msdn.microsoft.com/en-us/data/jj556606.aspx
有Connection Strings， Default Connection Factory， Database Initializers

Database.SetInitializer<TContext> Method （https://msdn.microsoft.com/en-us/library/gg679461(v=vs.113).aspx）
Sets the database initializer to use for the given context type. The database initializer is called when a the given DbContext type is used to access a database for the first time. The default strategy for Code First contexts is an instance of CreateDatabaseIfNotExists<TContext>.

Code First Model Configuration Classes（EntityTypeConfiguration）
http://www.codeproject.com/Articles/165720/Using-the-Code-First-Model-Configuration-Classes

Database initializer: 
https://github.com/aspnet/EntityFramework6/blob/527ae18fe23f7649712e9461de0c90ed67c3dca9/src/EntityFramework/CreateDatabaseIfNotExists%60.cs
EF CreateDatabaseIfNotExists.cs 源码
// Either the database doesn't exist, or exists and is considered empty
                context.Database.Create(existence);
                Seed(context);
                context.SaveChanges();


如果自己写initializer， 需要记得创建Database
CreateCeDatabaseIfNotExists.cs -> IDatabaseInitializer代码
                context.Database.Create();
                Seed(context);
                context.SaveChanges();


SQL Server Connection Strings for ASP.NET Web Applications
https://msdn.microsoft.com/en-us/library/jj653752(v=vs.110).aspx
<add name="ConnectionStringName"
    providerName="System.Data.SqlServerCe.4.0"
    connectionString="Data Source=|DataDirectory|\DatabaseFileName.sdf" />

DbContext执行sql
context.Database.SqlQuery<ReturnType>(command);
context.Database.ExecuteSqlCommand(command);

TransactionScope（*）
http://www.codeproject.com/Articles/690136/All-About-TransactionScope#hHowToUse

Execute stored procedure:(https://msdn.microsoft.com/en-us/library/gg679117(v=vs.113).aspx)
执行存储过程传参数
context.Database.SqlQuery<myEntityType>(
    "mySpName @param1, @param2, @param3",
    new SqlParameter("param1", param1),
    new SqlParameter("param2", param2),
    new SqlParameter("param3", param3)
);
执行sql传参数
if (context.Database.SqlQuery<int>("SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = {0}", tableName).Any<int>())

var existingTableNames = new List<string>(context.Database.SqlQuery<string>("SELECT table_name FROM INFORMATION_SCHEMA.TABLES WHERE table_type = 'BASE TABLE'"));
context.Database.SqlQuery<int>("SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = {0}", tableName).Any<int>()


FluentAPI:

实际上不使用.WithMany()也是可以的, 使用.WithMany()一般用来后面继续跟其它的api
HasRequired(j => j.Account).WithMany(); = HasRequired(j => j.Account)
https://forums.asp.net/t/1779574.aspx?Navigation+Properties+using+WithMany+